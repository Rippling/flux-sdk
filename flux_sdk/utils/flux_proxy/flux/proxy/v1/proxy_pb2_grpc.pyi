"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import typing

import grpc
import grpc.aio

from flux_sdk.utils.flux_proxy.flux.proxy.v1 import proxy_pb2

_T = typing.TypeVar("_T")


class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...


class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...


class FluxProxyServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...

    GetCACertificates: grpc.UnaryUnaryMultiCallable[
        proxy_pb2.GetCACertificatesRequest,
        proxy_pb2.GetCACertificatesResponse,
    ]
    """Returns the CA Certificate(s) used for signing SSL certificates created by the proxy."""

    StartSession: grpc.UnaryUnaryMultiCallable[
        proxy_pb2.StartSessionRequest,
        proxy_pb2.StartSessionResponse,
    ]
    """Session management.  Sessions are immutable once created."""

    EndSession: grpc.UnaryUnaryMultiCallable[
        proxy_pb2.EndSessionRequest,
        proxy_pb2.EndSessionResponse,
    ]


class FluxProxyServiceAsyncStub:
    GetCACertificates: grpc.aio.UnaryUnaryMultiCallable[
        proxy_pb2.GetCACertificatesRequest,
        proxy_pb2.GetCACertificatesResponse,
    ]
    """Returns the CA Certificate(s) used for signing SSL certificates created by the proxy."""

    StartSession: grpc.aio.UnaryUnaryMultiCallable[
        proxy_pb2.StartSessionRequest,
        proxy_pb2.StartSessionResponse,
    ]
    """Session management.  Sessions are immutable once created."""

    EndSession: grpc.aio.UnaryUnaryMultiCallable[
        proxy_pb2.EndSessionRequest,
        proxy_pb2.EndSessionResponse,
    ]


class FluxProxyServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetCACertificates(
            self,
            request: proxy_pb2.GetCACertificatesRequest,
            context: _ServicerContext,
    ) -> typing.Union[
        proxy_pb2.GetCACertificatesResponse, collections.abc.Awaitable[proxy_pb2.GetCACertificatesResponse]]:
        """Returns the CA Certificate(s) used for signing SSL certificates created by the proxy."""

    @abc.abstractmethod
    def StartSession(
            self,
            request: proxy_pb2.StartSessionRequest,
            context: _ServicerContext,
    ) -> typing.Union[proxy_pb2.StartSessionResponse, collections.abc.Awaitable[proxy_pb2.StartSessionResponse]]:
        """Session management.  Sessions are immutable once created."""

    @abc.abstractmethod
    def EndSession(
            self,
            request: proxy_pb2.EndSessionRequest,
            context: _ServicerContext,
    ) -> typing.Union[proxy_pb2.EndSessionResponse, collections.abc.Awaitable[proxy_pb2.EndSessionResponse]]: ...


def add_FluxProxyServiceServicer_to_server(servicer: FluxProxyServiceServicer,
                                           server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
